#PING-PONG GAME :

 import cv2
import cvzone
from cvzone.HandTrackingModule import HandDetector
import numpy as np

cap = cv2.VideoCapture(0)
cap.set(3, 1280)
cap.set(4, 720)

# Importing all images
imgBackground = cv2.imread("Resources/Background.png")
imgGameOver = cv2.imread("Resources/gameOver.png")
imgBall = cv2.imread("Resources/Ball.png", cv2.IMREAD_UNCHANGED)
imgBat1 = cv2.imread("Resources/bat1.png", cv2.IMREAD_UNCHANGED)
imgBat2 = cv2.imread("Resources/bat2.png", cv2.IMREAD_UNCHANGED)

# Hand Detector
detector = HandDetector(detectionCon=0.8, maxHands=2)

# Variables
ballPos = [100, 100]
speedX = 30
speedY = 30
gameOver = False
score = [0, 0]

while True:
    _, img = cap.read()
    img = cv2.flip(img, 1)
    imgRaw = img.copy()

    # Find the hand and its landmarks
    hands, img = detector.findHands(img, flipType=False)  # with draw

    # Overlaying the background image
    img = cv2.addWeighted(img, 0.2, imgBackground, 0.8, 0)

    # Check for hands
    if hands:
        for hand in hands:
            x, y, w, h = hand['bbox']
            h1, w1, _ = imgBat1.shape
            y1 = y - h1 // 2
            y1 = np.clip(y1, 20, 415)

            if hand['type'] == "Left":
                img = cvzone.overlayPNG(img, imgBat1, (59, y1))
                if 59 < ballPos[0] < 59 + w1 and y1 < ballPos[1] < y1 + h1:
                    speedX = -speedX
                    ballPos[0] += 30
                    score[0] += 1

            if hand['type'] == "Right":
                img = cvzone.overlayPNG(img, imgBat2, (1195, y1))
                if 1195 - 50 < ballPos[0] < 1195 and y1 < ballPos[1] < y1 + h1:
                    speedX = -speedX
                    ballPos[0] -= 30
                    score[1] += 1

    # Game Over
    if ballPos[0] < 40 or ballPos[0] > 1200:
        gameOver = True

    if gameOver:
        img = imgGameOver
        cv2.putText(img, str(score[1] + score[0]).zfill(2), (585, 360), cv2.FONT_HERSHEY_COMPLEX,
                    2.5, (200, 0, 200), 5)

    # If game not over move the ball
    else:

        # Move the Ball
        if ballPos[1] >= 500 or ballPos[1] <= 10:
            speedY = -speedY

        ballPos[0] += speedX
        ballPos[1] += speedY

        # Draw the ball
        img = cvzone.overlayPNG(img, imgBall, ballPos)

        cv2.putText(img, str(score[0]), (300, 650), cv2.FONT_HERSHEY_COMPLEX, 3, (255, 255, 255), 5)
        cv2.putText(img, str(score[1]), (900, 650), cv2.FONT_HERSHEY_COMPLEX, 3, (255, 255, 255), 5)

    img[580:700, 20:233] = cv2.resize(imgRaw, (213, 120))

    cv2.imshow("Image", img)
    key = cv2.waitKey(1)

    if key == ord('r'):
        ballPos = [100, 100]
        speedX = 15
        speedY = 15
        gameOver = False
        score = [0, 0]
        imgGameOver = cv2.imread("Resources/gameOver.png")




########################################################################################################################################################

#Space-War game:


import cv2

import math
import random
import time
import mediapipe as np
import pygame
from pygame.locals import *
from pygame import mixer

from cvzone.HandTrackingModule import HandDetector
detector=HandDetector(detectionCon=0.8,maxHands=2)

# Intialize the pygame
pygame.init()

# create the screen
screen = pygame.display.set_mode((800, 600))

# Background
background = pygame.image.load('D://back.gif')

# Sound
mixer.music.load("D://kv_files//Login Screen UI//Space-Invaders-Pygame-master//background.wav")
mixer.music.play(-1)

# Caption and Icon
pygame.display.set_caption("Space War")
icon = pygame.image.load('D://Users//ufo1.png')
pygame.display.set_icon(icon)

# Player
playerImg = pygame.image.load('D://Users//spaceship (1).png')
playerImg = pygame.transform.scale(playerImg,(70,70))
playerX = 370
playerY = 480
playerX_change = 0
playerY_change = 0


# Enemy
enemyImg = []
enemyX = []
enemyY = []
enemyX_change = []
enemyY_change = []
num_of_enemies = 6

for i in range(num_of_enemies):
    enemyImg.append(pygame.image.load('D://Users//alien.png'))
    enemyImg[i] = pygame.transform.scale(enemyImg[i], (70, 70))
    enemyX.append(random.randint(0, 736))
    enemyY.append(random.randint(50, 150))
    enemyX_change.append(3)
    enemyY_change.append(40)


# Bullet

# Ready - You can't see the bullet on the screen
# Fire - The bullet is currently moving

bulletImg = pygame.image.load('D://Users//bullet.png')
bulletImg = pygame.transform.scale(bulletImg,(40,40))
bulletX = 0
bulletY = 480
bulletX_change = 0
bulletY_change = 19
bullet_state = "ready"

# Score

score_value = 0
font = pygame.font.Font('freesansbold.ttf', 32)

textX = 10
testY = 10

# Game Over
over_font = pygame.font.Font('freesansbold.ttf', 64)


def show_score(x, y):
    score = font.render("Score : " + str(score_value), True, (255, 255, 255))
    screen.blit(score, (x, y))


def game_over_text():
    over_text = over_font.render("GAME OVER", True, (255, 255, 255))
    screen.blit(over_text, (200, 250))


def player(x, y):
    screen.blit(playerImg, (x, y))


def enemy(x, y, i):
    screen.blit(enemyImg[i], (x, y))


def fire_bullet(x, y):
    global bullet_state
    bullet_state = "fire"
    screen.blit(bulletImg, (x + 16, y + 10))


def isCollision(enemyX, enemyY, bulletX, bulletY):
    distance = math.sqrt(math.pow(enemyX - bulletX, 2) + (math.pow(enemyY - bulletY, 2)))
    if distance < 27:
        return True
    else:
        return False


# Game Loop
running = True

video=cv2.VideoCapture(0)

while running:

    ret,frame=video.read()
    hands, img = detector.findHands(frame)
    print(hands)
    if hands:
        lmlist = hands[0]
        fingerUp = detector.fingersUp(lmlist)
        print(fingerUp)

        if fingerUp == [1, 1, 1, 1, 1]:
            playerX_change -= 10
        if fingerUp == [0, 0, 0, 0, 0]:
            playerX_change += 10
        if fingerUp == [0, 1, 0, 0, 0]:
            if bullet_state == "ready":
                bulletSound = mixer.Sound("D://kv_files//Login Screen UI//Space-Invaders-Pygame-master//laser.wav")
                bulletSound.play()
                # Get the current x cordinate of the spaceship
                bulletX = playerX
                bulletY = playerY
                fire_bullet(bulletX, bulletY)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

    # RGB = Red, Green, Blue

    screen.fill((0, 0, 0))
    # Background Image
    screen.blit(background, (0, 0))

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

        # if keystroke is pressed check whether its right or left
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_LEFT:
                playerX_change = -0.6
            if event.key == pygame.K_RIGHT:
                playerX_change = 0.6
            if event.key == pygame.K_UP:
                playerY_change = -0.6
            if event.key == pygame.K_DOWN:
                playerY_change = 0.6
            if event.key == pygame.K_SPACE:
                if bullet_state == "ready":
                    bulletSound = mixer.Sound("D://kv_files//Login Screen UI//Space-Invaders-Pygame-master//laser.wav")
                    bulletSound.play()
                    # Get the current x cordinate of the spaceship
                    bulletX = playerX
                    bulletY = playerY
                    fire_bullet(bulletX, bulletY)

        if event.type == pygame.KEYUP:
            if event.key == pygame.K_LEFT or event.key == pygame.K_RIGHT or event.key == pygame.K_UP or event.key == pygame.K_DOWN:
                playerX_change = 0
                playerY_change = 0



    # 5 = 5 + -0.1 -> 5 = 5 - 0.1
    # 5 = 5 + 0.1

    playerX += playerX_change
    playerY += playerY_change
    playerX_change = 0
    if playerX <= 0:
        playerX = 0
    elif playerX >= 736:
        playerX = 736

    # Enemy Movement
    for i in range(num_of_enemies):

        # Game Over
        if enemyY[i] > 440:
            for j in range(num_of_enemies):
                enemyY[j] = 2000
            game_over_text()
            break

        enemyX[i] += enemyX_change[i]

        if enemyX[i] <= 0:
            enemyX_change[i] = 3
            enemyY[i] += enemyY_change[i]
        elif enemyX[i] >= 736:
            enemyX_change[i] = -3
            enemyY[i] += enemyY_change[i]

        # Collision
        collision = isCollision(enemyX[i], enemyY[i], bulletX, bulletY)
        if collision:
            explosionSound = mixer.Sound("D://kv_files//Login Screen UI//Space-Invaders-Pygame-master//explosion.wav")
            explosionSound.play()
            bulletY = 480
            bullet_state = "ready"
            score_value += 1
            enemyX[i] = random.randint(0, 736)
            enemyY[i] = random.randint(50, 150)

        enemy(enemyX[i], enemyY[i], i)

    # Bullet Movement
    if bulletY <= 0:
        bulletY = 480
        bullet_state = "ready"

    if bullet_state == "fire":
        fire_bullet(bulletX, bulletY)
        bulletY -= bulletY_change

    player(playerX, playerY)
    show_score(textX, testY)
    pygame.display.update()



##########################################################################################################################################################################

#BIKE RACING GAME:

import pygame
from pygame.locals import *
import random
#import keyboard
from tkinter import *

import cv2
from cvzone.HandTrackingModule import HandDetector

detector=HandDetector(detectionCon=0.8, maxHands=1)

video=cv2.VideoCapture(0)

win = Tk()
pygame.init()

# create window
width = 500
height = 500
screen_size = (width, height)
screen = pygame.display.set_mode(screen_size)
pygame.display.set_caption('Car Game')

# colors
gray = (100, 100, 100)
green = (76, 208, 56)
red = (200, 0, 0)
white = (255, 255, 255)
yellow = (255, 232, 0)

# game setting
gameover = False
speed = 2
score = 0

# marker size
marker_width = 10
marker_height = 50

# road and edge markers
road = (100, 0, 300, height)
left_edge_marker = (95, 0, marker_width, height)
right_edge_marker = (395, 0, marker_width, height)

# x coordinates of lanes
left_lane = 150
center_lane = 250
right_lane = 350
lanes = [left_lane, center_lane, right_lane]

# for animation of lane markers
lane_marker_move_y = 0


# bike image
class Vehicle(pygame.sprite.Sprite):

    def __init__(self, image, x, y):
        pygame.sprite.Sprite.__init__(self)

        # fitting bike images
        image_scale = 60 / image.get_rect().width
        new_width = image.get_rect().width * image_scale
        new_height = image.get_rect().height * image_scale
        self.image = pygame.transform.scale(image, (new_width, new_height))
        # objects place
        self.rect = self.image.get_rect()
        self.rect.center = [x, y]


# fitting objects
class Object(pygame.sprite.Sprite):

    def __init__(self, image, x, y):
        pygame.sprite.Sprite.__init__(self)

        # fitting bike images
        image_scale = 110 / image.get_rect().width
        new_width = image.get_rect().width * image_scale
        new_height = image.get_rect().height * image_scale
        self.image = pygame.transform.scale(image, (new_width, new_height))
        # objects place
        self.rect = self.image.get_rect()
        self.rect.center = [40, y]


class PlayerVehicle(Vehicle):

    def __init__(self, x, y):
        image = pygame.image.load('Images/bike2.png')
        super().__init__(image, x, y)


# players start position
player_x = 250
player_y = 400

# player bike
player_group = pygame.sprite.Group()
player = PlayerVehicle(player_x, player_y)
player_group.add(player)

# load other vehicles
image_filenames = ['bike.png', 'car.png', 'bike3.png', 'bike4.png', 'bike5.png', 'bike6.png', 'bike7.png', 'truck.png',
                   'trailer.png', 'taxi.png', 'van.png']
obj_filenames = ['tree1.png', 'tree2.png', 'tree3.jpg', 'bush1.png', 'bush2.jpg', 'bush3.png', 'bush4.png', 'bush5.png',
                 'build1.jpg', 'build2.png', 'build3.png', 'build4.png', 'stone1.png']
vehicle_images = []
obj_images = []
for image_filename in image_filenames:
    image = pygame.image.load('Images/' + image_filename)
    vehicle_images.append(image)

# object insert
for obj_filename in obj_filenames:
    image1 = pygame.image.load('Images/' + obj_filename)
    obj_images.append(image1)

# sprite group for vehicles
vehicle_group = pygame.sprite.Group()
obj_group = pygame.sprite.Group()

# Load crash
crash = pygame.image.load('Images/crash.png')
crash_rect = crash.get_rect()

# game loop
clock = pygame.time.Clock()
fps = 120
running = True
display = True
block = True


def brake(running, lane_marker_move_y):
    lane_marker_move_y += speed * 0


while running:
    clock.tick(fps)
    ret, frame = video.read()
    hands, img = detector.findHands(frame)
    if hands:
        lmlist = hands[0]
        FINGERUP = detector.fingersUp(lmlist)
        print(FINGERUP)


    if FINGERUP == [0, 1, 1, 0, 0]:
        player.rect.x -= 30

    if FINGERUP == [0, 1, 1, 1, 0]:
        player.rect.x += 30


    for vehicle in vehicle_group:
        if pygame.sprite.collide_rect(player, vehicle):
            gameover = True
            if FINGERUP == [0, 1, 1, 0, 0]:
                        player.rect.left = vehicle.rect.left
                        crash_rect.center = [player.rect.left, (player.rect.center[1] + vehicle.rect.center[1]) / 2]
            elif FINGERUP == [0, 1, 1, 1,0]:
                player.rect.right = vehicle.rect.left
                crash_rect.center = [player.rect.right, (player.rect.center[1] + vehicle.rect.center[1]) / 2]

            for obj in obj_group:
                if pygame.sprite.collide_rect(player, vehicle):
                    gameover = True

    # draw the grass(background)
    screen.fill(yellow)

    # draw road
    pygame.draw.rect(screen, gray, road)

    # draw the edge markers(side lines)
    pygame.draw.rect(screen, red, left_edge_marker)
    pygame.draw.rect(screen, red, right_edge_marker)

    # draw the lanes(center lines)
    lane_marker_move_y += speed * 2  # speed
    if lane_marker_move_y >= marker_height * 2:
        lane_marker_move_y = 0
    for y in range(marker_height * -2, height, marker_height * 2):
        pygame.draw.rect(screen, white, (left_lane + 45, y + lane_marker_move_y, marker_width, marker_height))
        pygame.draw.rect(screen, white, (center_lane + 45, y + lane_marker_move_y, marker_width, marker_height))

    # draw the bike
    player_group.draw(screen)

    # add two vehicles
    if len(vehicle_group) < 2:
        # ensure the gap b/t vehicles
        add_vehicle = True
        for vehicle in vehicle_group:
            if vehicle.rect.top < vehicle.rect.height * 1.5:
                add_vehicle = False
        if add_vehicle:
            # select random lane
            lane = random.choice(lanes)

            # select random vehicles
            image = random.choice(vehicle_images)
            image1 = random.choice(obj_images)
            vehicle = Vehicle(image, lane, height / -2)
            vehicle_group.add(vehicle)
            obj = Object(image1, lane, height / -2)
            obj_group.add(obj)

    # make the vehicles move
    for vehicle in vehicle_group:
        vehicle.rect.y += speed

        # remove vehicle once it goes off screen
        if vehicle.rect.top >= height:
            vehicle.kill()

            # add to score
            score += 1

            # speed up game after 5 vehicles
            if score > 0 and score % 5 == 0:
                speed += 1

    for obj in obj_group:
        obj.rect.y += speed

        # remove vehicle once it goes off screen
        if obj.rect.top >= height:
            obj.kill()

            # add to score
            score += 1

            # speed up game after 5 vehicles
            if score > 0 and score % 5 == 0:
                speed += 1

    # draw the vehicles
    vehicle_group.draw(screen)
    obj_group.draw(screen)

    # display score
    font = pygame.font.Font(pygame.font.get_default_font(), 16)
    text = font.render('Score' + str(score), True, white)
    text_rect = text.get_rect()
    text_rect.center = (50, 450)
    screen.blit(text, text_rect)

    # check if collison occurs
    if pygame.sprite.spritecollide(player, vehicle_group, True):
        gameover = True
        crash_rect.center = [player.rect.center[0], player.rect.top]

    # display game over
    if gameover:
        screen.blit(crash, crash_rect)

        pygame.draw.rect(screen, red, (0, 50, width, 100))

        font = pygame.font.Font(pygame.font.get_default_font(), 16)
        text = font.render('Game Over. Play again? (Enter Y or N)', True, white)
        text_rect = text.get_rect()
        text_rect.center = (width / 2, 100)
        screen.blit(text, text_rect)

    pygame.display.update()

    # check for replay
    while gameover:
        clock.tick(fps)

        for event in pygame.event.get():

            if event.type == QUIT:
                gameover = False
                running = False

            # get input from player
            if event.type == KEYDOWN:
                if event.key == K_y:
                    gameover = False  # game restarts
                    speed = 2
                    score = 0
                    vehicle_group.empty()
                    player.rect.center = [player_x, player_y]
                elif event.key == K_n:
                    # exit from game(loop)
                    gameover = False
                    running = False

    # pygame.quit()

######################################################################################################################################################################

#BALLON POP GAME:



import random
import pygame
import cv2
import numpy as np
from cvzone.HandTrackingModule import HandDetector
import time


pygame.init()


width, height = 1280, 720
window = pygame.display.set_mode((width, height))
pygame.display.set_caption("Balloon Pop")


fps = 30
clock = pygame.time.Clock()


cap = cv2.VideoCapture(0)
cap.set(3, 1280)  # width
cap.set(4, 720)  # height


imgBalloon = pygame.image.load("D:\\Users\\ballon.png").convert_alpha()
rectBalloon = imgBalloon.get_rect()
rectBalloon.x, rectBalloon.y = 500, 300


speed = 15
score = 0
startTime = time.time()
totalTime = 30


detector = HandDetector(detectionCon=0.8, maxHands=1)


def resetBalloon():
    rectBalloon.x = random.randint(100, img.shape[1] - 100)
    rectBalloon.y = img.shape[0] + 50



start = True
while start:
    # Get Events
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            start = False
            pygame.quit()


    timeRemain = int(totalTime - (time.time() - startTime))
    if timeRemain < 0:
        window.fill((255, 255, 255))

        font = pygame.font.Font('freesansbold.ttf', 50)
        textScore = font.render(f'Your Score: {score}', True, (50, 50, 255))
        textTime = font.render(f'Time UP', True, (50, 50, 255))
        window.blit(textScore, (450, 350))
        window.blit(textTime, (530, 275))

    else:

        success, img = cap.read()
        img = cv2.flip(img, 1)
        hands, img = detector.findHands(img, flipType=False)

        rectBalloon.y -= speed  # Move the balloon up

        if rectBalloon.y < 0:
            resetBalloon()
            speed += 1

        if hands:
            #hand = hands[0]
            #x, y = hand['lmList'][8]
            lmlist = hands[0]
            fingerUp = detector.fingersUp(lmlist)
            x=fingerUp[0]
            y=fingerUp[1]
            if rectBalloon.collidepoint(x, y):
                resetBalloon()
                score += 10
                speed += 1

        imgRGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        imgRGB = np.rot90(imgRGB)
        frame = pygame.surfarray.make_surface(imgRGB).convert()
        frame = pygame.transform.flip(frame, True, False)
        window.blit(frame, (0, 0))
        window.blit(imgBalloon, rectBalloon)

        font = pygame.font.Font('freesansbold.ttf', 50)
        textScore = font.render(f'Score: {score}', True, (50, 50, 255))
        textTime = font.render(f'Time: {timeRemain}', True, (50, 50, 255))
        window.blit(textScore, (35, 35))
        window.blit(textTime, (1000, 35))

    pygame.display.update()
    clock.tick(fps)



************************************************************************* THE END *****************************************************************************************